import data_utils
import ndjson
from torch.utils import data

class QuickDrawDataset(data.Dataset):
    """
    A dataset encapsulating numpy arrays from the QuickDraw dataset and images
    generated by composing the numpy dataset with itself to create new "multi-
    object" images
    """
    def __init__(self, list_IDs, labels, img_size=128):
        """
        @param list_IDs - list (str): list containing filenames of all training
                        examples
        @param labels - list(str): list containing string names of all labels
        @param img_size - int: the size to convert images in the dataset
        """
        self.list_IDs = list_IDs
        self.labels = labels
        self.img_size = img_size
        self.labels_to_indices = {}
        
        for i, label in enumerate(self.labels):
            self.labels_to_indices[label] = i

    def __len__(self):
        return len(self.list_IDs)

    def __getitem__(self, index):
        """
        @returns drawing_decoded - np.array (img_size x img_size x 3): drawing 
                                    decoded as a np array
        @returns index - index of the correct label associated with the drawing
        """
        filename = self.list_IDs[index]
        with open(filename) as f:
            drawing = ndjson.load(f)
        drawing_decoded = data_utils.decode_drawing(drawing[0]['drawing'], size=self.img_size)
        label = self.labels_to_indices[drawing[0]['word']]
        return drawing_decoded, label

    def generate_composite_drawing(self, boxes, indices):
        """
        Generates a composite drawing given the bounding boxes and labels of 
        the individual components
        @param boxes - ndarray (N x 4): the predicted boxes in [x1, y1, x2, y2]
        @param indices - list - int (len N): the indices of the labels to add

        @returns list: list containing x, y, and time of each stroke of
                        the composite drawing
        @returns list (int): labels
        """
        assert len(boxes) == len(indices)
        composite_sketch = []
        labels = []
        for i, box in enumerate(boxes):
            filename = self.list_IDs[indices[i]]
            with open(filename) as f:
                drawing = ndjson.load(f)
                raw_strokes = drawing[0]['drawing']
                label = self.labels_to_indices[drawing[0]['word']]

            transformed = data_utils.affine_transform_drawing(raw_strokes, box)
            composite_sketch += transformed
            labels.append(label)
        return composite_sketch, labels